#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;
use Symfony\Component\HttpFoundation\Response;
use PhpParser\Node\Stmt;
use PhpParser\Node\Scalar;
use Psl\Fun;
use Functional as f;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;
use function Symfony\Component\String\u;

$application = new Application();

$application
    ->register('generate-helpers')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        $reflectedClass = new ReflectionClass(Response::class);
        $twig = new Environment(new FilesystemLoader(__DIR__));
        $io = new SymfonyStyle($input, $output);

        $filesystem = new Filesystem();
        $filesystem->remove(Path::canonicalize(__DIR__ . '/../src'));
        $filesystem->mkdir(Path::canonicalize(__DIR__ . '/../src'));

        $pipe = Fun\pipe(
            strtolower(...),
            f\partial_left(str_replace(...), "http_", ""),
            static fn(string $s): string => u($s)->camel()->toString(),
            static function (string $s): string {
                $reservedWords = [
                    'continue' => 'continueResponse'
                ];

                foreach ($reservedWords as $reservedWord => $substitution) {
                    if ($reservedWord === $s) {
                        return $substitution;
                    }
                }

                return $s;
            }
        );

        $constants = $reflectedClass->getConstants();
        $composerJson = json_decode(file_get_contents(__DIR__ . '/../composer.json'), true, flags: JSON_THROW_ON_ERROR);
        $composerJson['autoload']['files'] = [];

        $io->progressStart(count($constants));

        foreach ($constants as $constantName => $constantValue) {
            if (!is_int($constantValue) || $constantValue < 100 || $constantValue > 511) {
                continue;
            }

            $functionName = $pipe($constantName);

            // Generate Normal Http Response helper
            $generatedJsonHelper = $twig->render('helper-template.php.twig', ['functionName' => $functionName, 'constantName' => $constantName]);
            $filesystem->dumpFile(
                Path::canonicalize(sprintf(__DIR__ . '/../src/%s.php', ucfirst($functionName))),
                $generatedJsonHelper
            );
            $composerJson['autoload']['files'][] = sprintf('src/%s.php', ucfirst($functionName));

            $filesystem->mkdir(
                Path::canonicalize(__DIR__ . '/../src/JsonResponse')
            );

            // Generate Json Http Response helper
            $generatedJsonHelper = $twig->render('helper-template-json.php.twig', ['functionName' => $functionName, 'constantName' => $constantName]);
            $filesystem->dumpFile(
                Path::canonicalize(sprintf(__DIR__ . '/../src/JsonResponse/%s.php', ucfirst($functionName))),
                $generatedJsonHelper
            );
            $composerJson['autoload']['files'][] = sprintf('src/JsonResponse/%s.php', ucfirst($functionName));

            $io->progressAdvance();
        }

        $filesystem->dumpFile(
            Path::canonicalize(__DIR__ . '/../composer.json'),
            json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)
        );

        $io->progressFinish();

        return Command::SUCCESS;
    });

$application->run();
